(Tous les cmd sont à ouvrir à cette adresse : C:\vagrant-projects\OracleDatabase\21.3.0)
(A chaque serveur démarré changer de cmd)

-- Allumer et se connecter VM 

Vagrant up 

Vagrant status

Vagrant ssh

--- HIVE ---

-- Ouvrir un nouveau cmd

Vagrant ssh

-- lancer le serveur Hive (avoir lancé hdfs avant dans un autre cmd)

(lancer hdfs : 
start-dfs.sh
start-yarn.sh
)

nohup hive --service metastore > /dev/null &
nohup hiveserver2 > /dev/null &

-- Ouvrir un nouveau cmd

Vagrant ssh

-- Se connecter au serveur HIVE

beeline -u jdbc:hive2://localhost:10000 vagrant

0: jdbc:hive2://localhost:10000>  

-----------------------------------------------------------------------------------------------------
--------------------------------------Partie Oracle noSQL--------------------------------------------
-----------------------------------------------------------------------------------------------------

-- Table externe Oracle noSQL

-----------------------------------------------------------------------------------------------------
--------------------------------------- Immatriculations_ext ----------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

drop table Immatriculations_ext;

CREATE EXTERNAL TABLE IF NOT EXISTS Immatriculations_ext  (
immatriculation string, 
marque string, 
nom string, 
puissance int, 
longueur String, 
nbplaces int,
nbportes int, 
couleur String, 
occasion boolean, 
prix int
)
STORED BY 'oracle.kv.hadoop.hive.table.TableStorageHandler'
TBLPROPERTIES (
"oracle.kv.kvstore" = "kvstore",
"oracle.kv.hosts" = "localhost:5000", 
"oracle.kv.tableName" = "IMMATRICULATIONS_ESTIA2223_PACHOT");

-- Verification : compter les lignes

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

select COUNT(*) from Immatriculations_ext;

-----------------------------------------------------------------------------------------------------
--------------------------------------Partie HDFS CO2------------------------------------------------
-----------------------------------------------------------------------------------------------------

-- On implémente le résultat dans hive (table externe voir la procédure dans tableHive.txt)
(Avoir lancé Hive et s y connecter dans deux cmd différents)

(lancer hive)

nohup hive --service metastore > /dev/null &
nohup hiveserver2 > /dev/null &

(Se connecter à Hive)

beeline -u jdbc:hive2://localhost:10000 vagrant

-- Faire les commande en-dessous dans hive sql
-----------------------------------------------------------------------------------------------------
--------------------------------------- CO2_EXT -----------------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

DROP TABLE IF EXISTS CO2_EXT; 

CREATE EXTERNAL TABLE IF NOT EXISTS CO2_EXT(
        marque STRING, 
        avgBonusMalus INT,
        avgCO2 INT,
        avgCoutEnergie INT)
    COMMENT 'CO2 text data'
    ROW FORMAT DELIMITED
    FIELDS TERMINATED BY ';'
    STORED AS TEXTFILE
    location 'hdfsFileSortedCO2Final';
	
-- On vérifie : 

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * from CO2_EXT; 

-- On créer une table interne (physique) dans laquelle on va implémenter la data de la table externe
-- A SAVOIR : 
-- Suppression de table externe : Hive supprime uniquement les métadonnées, constituées principalement du schéma.
-- Suppression de table interne : Hive supprime les données et les métadonnées stockées dans l'entrepôt Hive.

-----------------------------------------------------------------------------------------------------
--------------------------------------- CO2(Table interne)-------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

DROP TABLE IF EXISTS CO2;

CREATE TABLE IF NOT EXISTS CO2(
  marque STRING, avgBonusMalus INT, avgCO2 INT,    
  avgCoutEnergie INT)
  COMMENT 'Data about Bonus Malus, emission of CO2 and ernergy cost for each brand';
  
-- ELT 

INSERT OVERWRITE TABLE CO2 SELECT * FROM CO2_EXT;

-- Verifier les données 

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * from CO2; 

-- Supprimer la table externe (pas obligatoire)

DROP TABLE IF EXISTS CO2_TEXT; 

-----------------------------------------------------------------------------------------------------
-------------------------------------- Partie MongoDB -----------------------------------------------
-----------------------------------------------------------------------------------------------------

-- Partie MongoDB avec hive (avoir démarré hdfs et hive)
-----------------------------------------------------------------------------------------------------
--------------------------------------- Catalogue_ext -----------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

-- Remove the Catalogue_ext table if it exists
DROP TABLE IF EXISTS Catalogue_ext;

-- Create MongoDB connected external table of Catalogue 
CREATE EXTERNAL TABLE Catalogue_ext ( id STRING, marque STRING, nom STRING, puissance INT, longueur STRING, nbPlaces INT, nbPortes INT, couleur STRING, occasion STRING, prix INT)
STORED BY 'com.mongodb.hadoop.hive.MongoStorageHandler'
WITH SERDEPROPERTIES('mongo.columns.mapping'='{"id":"_id", "nbPlaces" : "nbPlaces", "nbPortes" : "nbPortes"}')
TBLPROPERTIES('mongo.uri'='mongodb://localhost:27017/projetBigData.Catalogue');

-- Query the external table

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * FROM Catalogue_ext;

-----------------------------------------------------------------------------------------------------
--------------------------------------- Catalogue(Table interne)-------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

DROP TABLE IF EXISTS Catalogue;

CREATE TABLE IF NOT EXISTS Catalogue(
  id STRING, marque STRING, nom STRING, puissance INT, longueur STRING, nbPlaces INT, nbPortes INT, couleur STRING, occasion STRING, prix INT)
  COMMENT 'Catalogue table intern table';
  
-- ELT 

INSERT OVERWRITE TABLE Catalogue SELECT * FROM Catalogue_ext;

-- Verifier les données 

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * from Catalogue; 

-----------------------------------------------------------------------------------------------------
--------------------------------------- Marketing_ext -----------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

-- Remove the Catalogue_ext table if it exists
DROP TABLE IF EXISTS Marketing_ext;

-- Create MongoDB connected external table of Marketing
CREATE EXTERNAL TABLE Marketing_ext ( id STRING, age INT, sexe STRING, taux INT, situationFamiliale STRING, nbEnfantsAcharge INT, 2emevoiture STRING)
STORED BY 'com.mongodb.hadoop.hive.MongoStorageHandler'
WITH SERDEPROPERTIES('mongo.columns.mapping'='{"id":"_id", "situationFamiliale" : "situationFamiliale", "nbEnfantsAcharge" : "nbEnfantsAcharge", "2emevoiture" : "2emevoiture"}')
TBLPROPERTIES('mongo.uri'='mongodb://localhost:27017/projetBigData.Marketing');

-- Query the external table

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * FROM Marketing_ext;

-----------------------------------------------------------------------------------------------------
--------------------------------------- Clients_4_ext -----------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

-- Remove the Catalogue_ext table if it exists
DROP TABLE IF EXISTS Clients_4_ext;

-- Create MongoDB connected external table of Clients_4_ext
CREATE EXTERNAL TABLE Clients_4_ext ( id STRING, age INT, sexe STRING, taux INT, situationFamiliale STRING, nbEnfantsAcharge INT, 2emevoiture STRING, immatriculation STRING)
STORED BY 'com.mongodb.hadoop.hive.MongoStorageHandler'
WITH SERDEPROPERTIES('mongo.columns.mapping'='{"id":"_id", "situationFamiliale" : "situationFamiliale", "nbEnfantsAcharge" : "nbEnfantsAcharge", "2emevoiture" : "2emevoiture"}')
TBLPROPERTIES('mongo.uri'='mongodb://localhost:27017/projetBigData.Clients_4');

-- Query the external table

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT COUNT(*) FROM Clients_4_ext;
SELECT * FROM Clients_4_ext;

-----------------------------------------------------------------------------------------------------
--------------------------------------- Clients_12_ext ----------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

-- Remove the Catalogue_ext table if it exists
DROP TABLE IF EXISTS Clients_12_ext;

-- Create MongoDB connected external table of Clients_12_ext
CREATE EXTERNAL TABLE Clients_12_ext ( id STRING, age INT, sexe STRING, taux INT, situationFamiliale STRING, nbEnfantsAcharge INT, 2emevoiture STRING, immatriculation STRING)
STORED BY 'com.mongodb.hadoop.hive.MongoStorageHandler'
WITH SERDEPROPERTIES('mongo.columns.mapping'='{"id":"_id", "situationFamiliale" : "situationFamiliale", "nbEnfantsAcharge" : "nbEnfantsAcharge", "2emevoiture" : "2emevoiture"}')
TBLPROPERTIES('mongo.uri'='mongodb://localhost:27017/projetBigData.Clients_12');

-- Query the external table

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT COUNT(*) FROM Clients_12_ext;
SELECT * FROM Clients_12_ext;


-----------------------------------------------------------------------------------------------------
--------------------------------------- CatalogueCO2 ------------------------------------------------
-----------------------------------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS projetBigData;
USE projetBigData;

DROP TABLE IF EXISTS CatalogueCO2;

CREATE TABLE IF NOT EXISTS CatalogueCO2(
  id STRING, marque STRING, nom STRING, puissance INT, longueur STRING, nbPlaces INT, nbPortes INT, couleur STRING, occasion STRING, prix INT, avgBonusMalus INT, avgCO2 INT,    
  avgCoutEnergie INT)
  COMMENT 'CatalogueCO2 table intern table';
  
-- ELT 

INSERT OVERWRITE TABLE CatalogueCO2 SELECT c.id, c.marque, c.nom, c.puissance, c.longueur, c.nbPlaces, c.nbPortes, c.couleur, c.occasion, c.prix
, CO2.avgBonusMalus, CO2.avgCO2 , CO2.avgCoutEnergie FROM Catalogue c, CO2 where UPPER(c.marque) LIKE REPLACE(UPPER(CO2.marque), 'Z', '');

-- Verifier les données 

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

SELECT * from CatalogueCO2 WHERE UPPER(marque) = "SAAB";


-----------------------------------------------------------------------
------------------------- CREATION DES VUES ---------------------------
-----------------------------------------------------------------------

set hive.cli.print.header=true;
set hive.cli.print.row.to.vertical=true;
set hive.cli.print.current.db=false;
set hive.cli.print.row.to.vertical.limit=10000;
set hive.resultset.use.unique.column.names=false;
set hive.cli.print.header.separator="\t";
set hive.cli.print.max_column_width=30;

-- On lie les deux tables clients

DROP VIEW IF EXISTS clients_ext;

CREATE VIEW clients_ext AS
SELECT *
FROM clients_4_ext
UNION ALL
SELECT *
FROM clients_12_ext;

-- Vérification

select * from clients_ext;

-- On lie clients_ext et immatriculations_ext

DROP VIEW IF EXISTS immatriculations_clients_ext;

CREATE VIEW immatriculations_clients_ext AS
SELECT immatriculations_ext.immatriculation, 
immatriculations_ext.marque, 
immatriculations_ext.nom, 
immatriculations_ext.puissance, 
immatriculations_ext.longueur, 
immatriculations_ext.nbplaces,
immatriculations_ext.nbportes, 
immatriculations_ext.couleur, 
immatriculations_ext.occasion, 
immatriculations_ext.prix,
clients_ext.age,
clients_ext.sexe,
clients_ext.taux,
clients_ext.situationFamiliale,
clients_ext.nbEnfantsAcharge,
clients_ext.2emevoiture
FROM clients_ext
JOIN immatriculations_ext ON clients_ext.immatriculation = immatriculations_ext.immatriculation;

select * from immatriculations_clients_ext;

